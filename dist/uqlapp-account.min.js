!function(){function e(e,t){t.aHrefSanitizationWhitelist(/^\s*(https?|l|data):/);var n,r=["$q","$log","$timeout","$injector",function(e,t,r,o){var u=function(t){var n=o.get("UQLAccountService");t.headers.Accept="application/json";var r=n.getToken();return r!==!1&&(t.headers[n.getTokenName()]=r),t||e.when(t)},c=function(t){return e.reject(t)},i=function(t){return n=n||o.get("$http"),t||e.when(t)},a=function(t){return n=n||o.get("$http"),e.reject(t)};return{request:u,requestError:c,response:i,responseError:a}}];e.interceptors.push(r)}e.$inject=["$httpProvider","$compileProvider"],angular.module("uql.app.account",["uql.app.config","ngCookies"]).config(e)}(),function(){"use strict";function e(e,t,n,r){var o=r.apiUrl+"account",u=!1,c=!1,i=null,a=function(){return angular.isDefined(n.get(r.uqlCookieName))?u=n.get(r.uqlCookieName):!1},s=function(){return r.uqlTokenHeader},f=function(){if(g()!==!1)return m().promise;l(),d(t.defer());var n=(new Date).getTime(),r=o+"?"+n;return e.get(r).success(function(e){l(),m().resolve(e)}).error(function(e){l(),m().reject(e)}),m().promise},p=function(n){var r=t.defer();return e({method:"POST",data:n,url:o}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},l=function(){c=!c},g=function(){return c},d=function(e){i=e},m=function(){return i};return{getAccount:f,getToken:a,getTokenName:s,updateAccount:p}}e.$inject=["$http","$q","$cookies","UQL_APP_CONFIG"],angular.module("uql.app.account").factory("UQLAccountService",e)}();
//# sourceMappingURL=data:application/json;base64,
