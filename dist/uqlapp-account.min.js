!function(){function e(e,n){n.aHrefSanitizationWhitelist(/^\s*(https?|l|data):/);var t,r=["$q","$log","$timeout","$injector",function(e,n,r,o){var u=function(n){var t=o.get("UQLAccountService");n.headers.Accept="application/json";var r=t.getToken();return r!==!1&&(n.headers[t.getTokenName()]=r),n||e.when(n)},c=function(n){return e.reject(n)},i=function(n){return t=t||o.get("$http"),n||e.when(n)},a=function(n){return t=t||o.get("$http"),e.reject(n)};return{request:u,requestError:c,response:i,responseError:a}}];e.interceptors.push(r)}angular.module("uql.app.account",["uql.app.config","ngCookies"]).config(e)}(),function(){"use strict";function e(e,n,t,r){var o=r.apiUrl+"account",u=!1,c=!1,i=null,a=function(){return angular.isDefined(t.get(r.uqlCookieName))?u=t.get(r.uqlCookieName):!1},f=function(){return r.uqlTokenHeader},s=function(){if(g()!==!1)return m().promise;p(),d(n.defer());var t=(new Date).getTime(),r=o+"?"+t;return e.get(r).success(function(e){p(),m().resolve(e)}).error(function(e){p(),m().reject(e)}),m().promise},l=function(t){var r=n.defer();return e({method:"POST",data:t,url:o}).success(function(e){r.resolve(e)}).error(function(e){r.reject(e)}),r.promise},p=function(){c=!c},g=function(){return c},d=function(e){i=e},m=function(){return i};return{getAccount:s,getToken:a,getTokenName:f,updateAccount:l}}angular.module("uql.app.account").factory("UQLAccountService",e)}();
//# sourceMappingURL=data:application/json;base64,
