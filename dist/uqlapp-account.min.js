var mock=mock||!1;!function(e){var n=["uql.app.config","ngCookies"];e&&n.push("uql.app.account.mock"),angular.module("uql.app.account",["uql.app.config","ngCookies"])}(mock),function(){function e(e,n){n.aHrefSanitizationWhitelist(/^\s*(https?|l|data):/);var o,t=["$q","$log","$timeout","$injector",function(e,n,t,u){var r=function(n){var o=u.get("UQLAccountService");n.headers.Accept="application/json";var t=o.getToken();return t!==!1&&(n.headers[o.getTokenName()]=t),n||e.when(n)},c=function(n){return e.reject(n)},i=function(n){return o=o||u.get("$http"),n||e.when(n)},a=function(n){return o=o||u.get("$http"),e.reject(n)};return{request:r,requestError:c,response:i,responseError:a}}];e.interceptors.push(t)}e.$inject=["$httpProvider","$compileProvider"],angular.module("uql.app.account").config(e)}(),function(){"use strict";angular.module("uql.app.account.mock",[]).value("AccountMockVal",{getAccount:{hasSession:!0,name:"Developer",id:"uqldev",groups:["CN=lib_libapi_SpotlightAdmins,OU=lib-libapi-groups,OU=LIB-groups,OU=University of Queensland Library,OU=Deputy Vice-Chancellor (Academic),OU=Vice-Chancellor,DC=uq,DC=edu,DC=au","CN=lib_libapi_LiaisonAdmins,OU=lib-libapi-groups,OU=LIB-groups,OU=University of Queensland Library,OU=Deputy Vice-Chancellor (Academic),OU=Vice-Chancellor,DC=uq,DC=edu,DC=au","CN=lib_staff,OU=LIB-groups,OU=University of Queensland Library,OU=Deputy Vice-Chancellor (Academic),OU=Vice-Chancellor,DC=uq,DC=edu,DC=au"]}}),angular.module("uql.app.account.mock").run(["$httpBackend","UQL_APP_CONFIG","AccountMockVal",function(e,n,o){console.log(o);var t=n.apiUrl+"account";e.whenGET(new RegExp(t+"?([0-9]*)")).respond(200,o.getAccount)}])}(),function(){function e(e,n,o){e.$on("uql.account.login",function(){n.location.href="https://www.library.uq.edu.au/uqlais/login?return="+n.btoa(o.absUrl())})}e.$inject=["$rootScope","$window","$location"],angular.module("uql.app.account").run(e)}(),function(){"use strict";function e(e,n,o,t){var u=t.apiUrl+"account",r=!1,c=!1,i=null,a=function(){return angular.isDefined(o.get(t.uqlCookieName))?r=o.get(t.uqlCookieName):!1},l=function(){return t.uqlTokenHeader},p=function(){if(g()!==!1)return m().promise;f(),d(n.defer());var o=(new Date).getTime(),t=u+"?"+o;return e.get(t).success(function(e){f(),m().resolve(e)}).error(function(e){f(),m().reject(e)}),m().promise},s=function(o){var t=n.defer();return e({method:"POST",data:o,url:u}).success(function(e){t.resolve(e)}).error(function(e){t.reject(e)}),t.promise},f=function(){c=!c},g=function(){return c},d=function(e){i=e},m=function(){return i};return{getAccount:p,getToken:a,getTokenName:l,updateAccount:s}}e.$inject=["$http","$q","$cookies","UQL_APP_CONFIG"],angular.module("uql.app.account").factory("UQLAccountService",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInVxbGFwcC1hY2NvdW50Lm1pbi5qcyIsInVxbC5hcHAuYWNjb3VudC5jb25maWcuanMiLCJ1cWwuYXBwLmFjY291bnQubW9jay5qcyIsInVxbC5hcHAuYWNjb3VudC5ydW4uanMiLCJ1cWwuYXBwLmFjY291bnQuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJtb2NrIiwibW9kdWxlcyIsInB1c2giLCJhbmd1bGFyIiwibW9kdWxlIiwiQ29uZmlnIiwiJGh0dHBQcm92aWRlciIsIiRjb21waWxlUHJvdmlkZXIiLCJhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCIsIiRodHRwIiwiaW50ZXJjZXB0b3IiLCIkcSIsIiRsb2ciLCIkdGltZW91dCIsIiRpbmplY3RvciIsIm9uUmVxdWVzdCIsImNvbmZpZyIsImFjY291bnRTdmMiLCJnZXQiLCJoZWFkZXJzIiwiQWNjZXB0IiwidG9rZW4iLCJnZXRUb2tlbiIsImdldFRva2VuTmFtZSIsIndoZW4iLCJvblJlcXVlc3RFcnJvciIsInJlamVjdGlvbiIsInJlamVjdCIsIm9uUmVzcG9uc2UiLCJyZXNwb25zZSIsIm9uUmVzcG9uc2VFcnJvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwiaW50ZXJjZXB0b3JzIiwiJGluamVjdCIsInZhbHVlIiwiZ2V0QWNjb3VudCIsImhhc1Nlc3Npb24iLCJuYW1lIiwiaWQiLCJncm91cHMiLCJydW4iLCIkaHR0cEJhY2tlbmQiLCJVUUxfQVBQX0NPTkZJRyIsIkFjY291bnRNb2NrVmFsIiwiY29uc29sZSIsImxvZyIsImFwaSIsImFwaVVybCIsIndoZW5HRVQiLCJSZWdFeHAiLCJyZXNwb25kIiwiUnVuQmxvY2siLCIkcm9vdFNjb3BlIiwiJHdpbmRvdyIsIiRsb2NhdGlvbiIsIiRvbiIsImxvY2F0aW9uIiwiaHJlZiIsImJ0b2EiLCJhYnNVcmwiLCJ1cWxBY2NvdW50U2VydmljZSIsIiRjb29raWVzIiwiaXNEZWZlcnJlZCIsImRlZmVycmVkIiwiaXNEZWZpbmVkIiwidXFsQ29va2llTmFtZSIsInVxbFRva2VuSGVhZGVyIiwiZ2V0SXNEZWZlcnJlZCIsImdldERlZmVycmVkIiwicHJvbWlzZSIsInRvZ2dsZUlzRGVmZXJyZWQiLCJzZXREZWZlcnJlZCIsImRlZmVyIiwidGltZXN0YW1wIiwiRGF0ZSIsImdldFRpbWUiLCJ1cmwiLCJzdWNjZXNzIiwiZGF0YSIsInJlc29sdmUiLCJlcnJvciIsInVwZGF0ZUFjY291bnQiLCJhY2NvdW50IiwibWV0aG9kIiwiZCIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJBQUtBLEdBQUFBLE1BQUFBLE9BQUEsR0FFQSxTQUFBQSxHQUNBLEdBQUFDLElBQ0EsaUJBQ0EsWUFHQUQsSUFDQUMsRUFBQUMsS0FBQSx3QkFHQUMsUUFBQUMsT0FBQSxtQkFBQSxpQkFBQSxlQUVBSixNQ0tBLFdDaEJBLFFBQUFLLEdBQUFDLEVBQUFDLEdBQ0FBLEVBQUFDLDJCQUFBLHVCQUVBLElBQUFDLEdBQ0FDLEdBQUEsS0FBQSxPQUFBLFdBQUEsWUFDQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFDLEdBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBSCxFQUFBSSxJQUFBLG9CQUVBRixHQUFBRyxRQUFBQyxPQUFBLGtCQUdBLElBQUFDLEdBQUFKLEVBQUFLLFVBS0EsT0FKQUQsTUFBQSxJQUNBTCxFQUFBRyxRQUFBRixFQUFBTSxnQkFBQUYsR0FHQUwsR0FBQUwsRUFBQWEsS0FBQVIsSUFHQVMsRUFBQSxTQUFBQyxHQUNBLE1BQUFmLEdBQUFnQixPQUFBRCxJQUdBRSxFQUFBLFNBQUFDLEdBRUEsTUFEQXBCLEdBQUFBLEdBQUFLLEVBQUFJLElBQUEsU0FDQVcsR0FBQWxCLEVBQUFhLEtBQUFLLElBR0FDLEVBQUEsU0FBQUosR0FFQSxNQURBakIsR0FBQUEsR0FBQUssRUFBQUksSUFBQSxTQUNBUCxFQUFBZ0IsT0FBQUQsR0FHQSxRQUNBSyxRQUFBaEIsRUFDQWlCLGFBQUFQLEVBQ0FJLFNBQUFELEVBQ0FLLGNBQUFILElBSUF4QixHQUFBNEIsYUFBQWhDLEtBQUFRLEdEMUJFTCxFQUFPOEIsU0FBVyxnQkFBaUIsb0JDcEJyQ2hDLFFBQUFDLE9BQUEsbUJBQUFZLE9BQUFYLE1DREEsV0FDQSxZQUVBRixTQUFBQyxPQUFBLDJCQUNBZ0MsTUFBQSxrQkFDQUMsWUFDQUMsWUFBQSxFQUNBQyxLQUFBLFlBQ0FDLEdBQUEsU0FDQUMsUUFDQSxrTEFDQSxnTEFDQSxnSkFNQXRDLFFBQUFDLE9BQUEsd0JBQ0FzQyxLQUFBLGVBQUEsaUJBQUEsaUJBQ0EsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQUMsUUFBQUMsSUFBQUYsRUFFQSxJQUFBRyxHQUFBSixFQUFBSyxPQUFBLFNBRUFOLEdBQUFPLFFBQUEsR0FBQUMsUUFBQUgsRUFBQSxjQUFBSSxRQUFBLElBQUFQLEVBQUFSLGtCRm9GQSxXR3pHQSxRQUFBZ0IsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUcsSUFBQSxvQkFBQSxXQUNBRixFQUFBRyxTQUFBQyxLQUFBLHFEQUFBSixFQUFBSyxLQUFBSixFQUFBSyxZSHdHRVIsRUFBU2xCLFNBQVcsYUFBYyxVQUFXLGFHN0cvQ2hDLFFBQUFDLE9BQUEsbUJBQUFzQyxJQUFBVyxNQ0RBLFdBQ0EsWUFNQSxTQUFBUyxHQUFBckQsRUFBQUUsRUFBQW9ELEVBQUFuQixHQUNBLEdBQUFJLEdBQUFKLEVBQUFLLE9BQUEsVUFDQTVCLEdBQUEsRUFDQTJDLEdBQUEsRUFDQUMsRUFBQSxLQU1BM0MsRUFBQSxXQUNBLE1BQUFuQixTQUFBK0QsVUFBQUgsRUFBQTdDLElBQUEwQixFQUFBdUIsZ0JBQ0E5QyxFQUFBMEMsRUFBQTdDLElBQUEwQixFQUFBdUIsZ0JBR0EsR0FRQTVDLEVBQUEsV0FDQSxNQUFBcUIsR0FBQXdCLGdCQU9BL0IsRUFBQSxXQUNBLEdBQUFnQyxPQUFBLEVBQ0EsTUFBQUMsS0FBQUMsT0FFQUMsS0FDQUMsRUFBQTlELEVBQUErRCxRQUNBLElBQUFDLElBQUEsR0FBQUMsT0FBQUMsVUFDQUMsRUFBQTlCLEVBQUEsSUFBQTJCLENBVUEsT0FUQWxFLEdBQUFTLElBQUE0RCxHQUNBQyxRQUFBLFNBQUFDLEdBQ0FSLElBQ0FGLElBQUFXLFFBQUFELEtBRUFFLE1BQUEsU0FBQUEsR0FDQVYsSUFDQUYsSUFBQTNDLE9BQUF1RCxLQUVBWixJQUFBQyxTQVFBWSxFQUFBLFNBQUFDLEdBQ0EsR0FBQW5CLEdBQUF0RCxFQUFBK0QsT0FZQSxPQVhBakUsSUFDQTRFLE9BQUEsT0FDQUwsS0FBQUksRUFDQU4sSUFBQTlCLElBRUErQixRQUFBLFNBQUFBLEdBQ0FkLEVBQUFnQixRQUFBRixLQUVBRyxNQUFBLFNBQUFBLEdBQ0FqQixFQUFBdEMsT0FBQXVELEtBRUFqQixFQUFBTSxTQUdBQyxFQUFBLFdBQ0FSLEdBQUFBLEdBR0FLLEVBQUEsV0FDQSxNQUFBTCxJQUdBUyxFQUFBLFNBQUFhLEdBQ0FyQixFQUFBcUIsR0FHQWhCLEVBQUEsV0FDQSxNQUFBTCxHQUlBLFFBQ0E1QixXQUFBQSxFQUNBZixTQUFBQSxFQUNBQyxhQUFBQSxFQUNBNEQsY0FBQUEsR0o0QkVyQixFQUFrQjNCLFNBQVcsUUFBUyxLQUFNLFdBQVksa0JJN0gxRGhDLFFBQUFDLE9BQUEsbUJBQ0FtRixRQUFBLG9CQUFBekIiLCJmaWxlIjoidXFsYXBwLWFjY291bnQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBdXRob3I6IEphbi1XaWxsZW0gV2lzZ2VyaG9mIDxqLndpc2dlcmhvZiBhdCBsaWJyYXJ5LnVxLmVkdS5hdT5cbiAqIERhdGU6IDE1LzAyLzE2XG4gKi9cblxudmFyIG1vY2sgPSBtb2NrIHx8IGZhbHNlO1xuXG4oZnVuY3Rpb24obW9jaykge1xuICB2YXIgbW9kdWxlcyA9IFtcbiAgICAndXFsLmFwcC5jb25maWcnLFxuICAgICduZ0Nvb2tpZXMnXG4gIF07XG5cbiAgaWYgKG1vY2spIHtcbiAgICBtb2R1bGVzLnB1c2goJ3VxbC5hcHAuYWNjb3VudC5tb2NrJyk7XG4gIH1cblxuICBhbmd1bGFyLm1vZHVsZSgndXFsLmFwcC5hY2NvdW50JywgWyd1cWwuYXBwLmNvbmZpZycsICduZ0Nvb2tpZXMnXSk7XG5cbn0pKG1vY2spOyIsIi8qKlxuICogQXV0aG9yOiBKYW4tV2lsbGVtIFdpc2dlcmhvZiA8ai53aXNnZXJob2YgYXQgbGlicmFyeS51cS5lZHUuYXU+XG4gKiBEYXRlOiAxNS8wMi8xNlxuICovXG5cbnZhciBtb2NrID0gbW9jayB8fCBmYWxzZTtcblxuKGZ1bmN0aW9uKG1vY2spIHtcbiAgdmFyIG1vZHVsZXMgPSBbXG4gICAgJ3VxbC5hcHAuY29uZmlnJyxcbiAgICAnbmdDb29raWVzJ1xuICBdO1xuXG4gIGlmIChtb2NrKSB7XG4gICAgbW9kdWxlcy5wdXNoKCd1cWwuYXBwLmFjY291bnQubW9jaycpO1xuICB9XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3VxbC5hcHAuYWNjb3VudCcsIFsndXFsLmFwcC5jb25maWcnLCAnbmdDb29raWVzJ10pO1xuXG59KShtb2NrKTtcbi8qKlxuICogQXV0aG9yOiBKYW4tV2lsbGVtIFdpc2dlcmhvZiA8ai53aXNnZXJob2YgYXQgbGlicmFyeS51cS5lZHUuYXU+XG4gKiBEYXRlOiAxNS8wMi8xNlxuICovXG4oZnVuY3Rpb24oKSB7XG4gIENvbmZpZy4kaW5qZWN0ID0gW1wiJGh0dHBQcm92aWRlclwiLCBcIiRjb21waWxlUHJvdmlkZXJcIl07XG4gIGFuZ3VsYXIubW9kdWxlKCd1cWwuYXBwLmFjY291bnQnKS5jb25maWcoQ29uZmlnKTtcblxuICAvKiogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIENvbmZpZyAoJGh0dHBQcm92aWRlciwgJGNvbXBpbGVQcm92aWRlcikge1xuICAgICRjb21waWxlUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QoL15cXHMqKGh0dHBzP3xsfGRhdGEpOi8pO1xuXG4gICAgdmFyICRodHRwLFxuICAgICAgaW50ZXJjZXB0b3IgPSBbJyRxJywgJyRsb2cnLCAnJHRpbWVvdXQnLCAnJGluamVjdG9yJyxcbiAgICAgICAgZnVuY3Rpb24gKCRxLCAkbG9nLCAkdGltZW91dCwgJGluamVjdG9yKSB7XG5cbiAgICAgICAgICB2YXIgb25SZXF1ZXN0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgdmFyIGFjY291bnRTdmMgPSAkaW5qZWN0b3IuZ2V0KCdVUUxBY2NvdW50U2VydmljZScpO1xuXG4gICAgICAgICAgICBjb25maWcuaGVhZGVycy5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIC8vIEFkZCBhdXRob3JpemF0aW9uIHRva2VuIGZvciBlYWNoIHJlcXVlc3RcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGFjY291bnRTdmMuZ2V0VG9rZW4oKTtcbiAgICAgICAgICAgIGlmICh0b2tlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY29uZmlnLmhlYWRlcnNbYWNjb3VudFN2Yy5nZXRUb2tlbk5hbWUoKV0gPSB0b2tlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZyB8fCAkcS53aGVuKGNvbmZpZyk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBvblJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uIChyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG9uUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICRodHRwID0gJGh0dHAgfHwgJGluamVjdG9yLmdldCgnJGh0dHAnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG9uUmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChyZWplY3Rpb24pIHtcbiAgICAgICAgICAgICRodHRwID0gJGh0dHAgfHwgJGluamVjdG9yLmdldCgnJGh0dHAnKTtcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IG9uUmVxdWVzdCxcbiAgICAgICAgICAgIHJlcXVlc3RFcnJvcjogb25SZXF1ZXN0RXJyb3IsXG4gICAgICAgICAgICByZXNwb25zZTogb25SZXNwb25zZSxcbiAgICAgICAgICAgIHJlc3BvbnNlRXJyb3I6IG9uUmVzcG9uc2VFcnJvclxuICAgICAgICAgIH07XG4gICAgICAgIH1dO1xuXG4gICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvcik7XG4gIH1cbn0pKCk7XG4vKipcbiAqIEF1dGhvcjogSmFuLVdpbGxlbSBXaXNnZXJob2YgPGoud2lzZ2VyaG9mIGF0IGxpYnJhcnkudXEuZWR1LmF1PlxuICogRGF0ZTogMTUvMDIvMTZcbiAqL1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3VxbC5hcHAuYWNjb3VudC5tb2NrJywgW10pXG4gICAgLnZhbHVlKCdBY2NvdW50TW9ja1ZhbCcsIHtcbiAgICAgICdnZXRBY2NvdW50Jzoge1xuICAgICAgICAnaGFzU2Vzc2lvbic6IHRydWUsXG4gICAgICAgICduYW1lJzogJ0RldmVsb3BlcicsXG4gICAgICAgICdpZCc6ICd1cWxkZXYnLFxuICAgICAgICAnZ3JvdXBzJzogW1xuICAgICAgICAgICdDTj1saWJfbGliYXBpX1Nwb3RsaWdodEFkbWlucyxPVT1saWItbGliYXBpLWdyb3VwcyxPVT1MSUItZ3JvdXBzLE9VPVVuaXZlcnNpdHkgb2YgUXVlZW5zbGFuZCBMaWJyYXJ5LE9VPURlcHV0eSBWaWNlLUNoYW5jZWxsb3IgKEFjYWRlbWljKSxPVT1WaWNlLUNoYW5jZWxsb3IsREM9dXEsREM9ZWR1LERDPWF1JyxcbiAgICAgICAgICAnQ049bGliX2xpYmFwaV9MaWFpc29uQWRtaW5zLE9VPWxpYi1saWJhcGktZ3JvdXBzLE9VPUxJQi1ncm91cHMsT1U9VW5pdmVyc2l0eSBvZiBRdWVlbnNsYW5kIExpYnJhcnksT1U9RGVwdXR5IFZpY2UtQ2hhbmNlbGxvciAoQWNhZGVtaWMpLE9VPVZpY2UtQ2hhbmNlbGxvcixEQz11cSxEQz1lZHUsREM9YXUnLFxuICAgICAgICAgICdDTj1saWJfc3RhZmYsT1U9TElCLWdyb3VwcyxPVT1Vbml2ZXJzaXR5IG9mIFF1ZWVuc2xhbmQgTGlicmFyeSxPVT1EZXB1dHkgVmljZS1DaGFuY2VsbG9yIChBY2FkZW1pYyksT1U9VmljZS1DaGFuY2VsbG9yLERDPXVxLERDPWVkdSxEQz1hdSdcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuXG4vLyBEZWZpbmUgb3VyIGZha2UgYmFja2VuZFxuICBhbmd1bGFyLm1vZHVsZSgndXFsLmFwcC5hY2NvdW50Lm1vY2snKVxuICAgIC5ydW4oWyckaHR0cEJhY2tlbmQnLCAnVVFMX0FQUF9DT05GSUcnLCAnQWNjb3VudE1vY2tWYWwnLFxuICAgICAgZnVuY3Rpb24gKCRodHRwQmFja2VuZCwgVVFMX0FQUF9DT05GSUcsIEFjY291bnRNb2NrVmFsKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coQWNjb3VudE1vY2tWYWwpO1xuXG4gICAgICAgIHZhciBhcGkgPSBVUUxfQVBQX0NPTkZJRy5hcGlVcmwgKyAnYWNjb3VudCc7XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kLndoZW5HRVQobmV3IFJlZ0V4cChhcGkgKyAnPyhbMC05XSopJykpLnJlc3BvbmQoMjAwLCBBY2NvdW50TW9ja1ZhbC5nZXRBY2NvdW50KTtcbiAgICAgIH1dKTtcblxufSkoKTtcbi8qKlxuICogQXV0aG9yOiBKYW4tV2lsbGVtIFdpc2dlcmhvZiA8ai53aXNnZXJob2YgYXQgbGlicmFyeS51cS5lZHUuYXU+XG4gKiBEYXRlOiAxNS8wMi8xNlxuICovXG5cbihmdW5jdGlvbigpIHtcbiAgUnVuQmxvY2suJGluamVjdCA9IFtcIiRyb290U2NvcGVcIiwgXCIkd2luZG93XCIsIFwiJGxvY2F0aW9uXCJdO1xuICBhbmd1bGFyLm1vZHVsZSgndXFsLmFwcC5hY2NvdW50JykucnVuKFJ1bkJsb2NrKTtcblxuICAvKiogQG5nSW5qZWN0ICoqL1xuICBmdW5jdGlvbiBSdW5CbG9jaygkcm9vdFNjb3BlLCAkd2luZG93LCAkbG9jYXRpb24pIHtcbiAgICAkcm9vdFNjb3BlLiRvbigndXFsLmFjY291bnQubG9naW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly93d3cubGlicmFyeS51cS5lZHUuYXUvdXFsYWlzL2xvZ2luP3JldHVybj0nICsgJHdpbmRvdy5idG9hKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgfSk7XG4gIH1cbn0pKCk7XG4vKipcbiAqIEF1dGhvcjogSmFuLVdpbGxlbSBXaXNnZXJob2YgPGoud2lzZ2VyaG9mIGF0IGxpYnJhcnkudXEuZWR1LmF1PlxuICogRGF0ZTogMTUvMDIvMTZcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB1cWxBY2NvdW50U2VydmljZS4kaW5qZWN0ID0gW1wiJGh0dHBcIiwgXCIkcVwiLCBcIiRjb29raWVzXCIsIFwiVVFMX0FQUF9DT05GSUdcIl07XG4gIGFuZ3VsYXIubW9kdWxlKCd1cWwuYXBwLmFjY291bnQnKVxuICAgIC5mYWN0b3J5KCdVUUxBY2NvdW50U2VydmljZScsIHVxbEFjY291bnRTZXJ2aWNlKTtcblxuICAvKiogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIHVxbEFjY291bnRTZXJ2aWNlKCRodHRwLCAkcSwgJGNvb2tpZXMsIFVRTF9BUFBfQ09ORklHKSB7XG4gICAgdmFyIGFwaSA9IFVRTF9BUFBfQ09ORklHLmFwaVVybCArICdhY2NvdW50JztcbiAgICB2YXIgdG9rZW4gPSBmYWxzZTtcbiAgICB2YXIgaXNEZWZlcnJlZCA9IGZhbHNlO1xuICAgIHZhciBkZWZlcnJlZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgY3VycmVudCB0b2tlbiB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdG9rZW4gdmFsdWUsIGVsc2UgZmFsc2UgaWYgaXQgZG9lc24ndCBleGlzdFxuICAgICAqL1xuICAgIHZhciBnZXRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkY29va2llcy5nZXQoVVFMX0FQUF9DT05GSUcudXFsQ29va2llTmFtZSkpKSB7XG4gICAgICAgIHRva2VuID0gJGNvb2tpZXMuZ2V0KFVRTF9BUFBfQ09ORklHLnVxbENvb2tpZU5hbWUpO1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSB0b2tlbiBuYW1lXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRva2VuIG5hbWVcbiAgICAgKi9cbiAgICB2YXIgZ2V0VG9rZW5OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFVRTF9BUFBfQ09ORklHLnVxbFRva2VuSGVhZGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gR2V0cyBhY2NvdW50IGRhdGFcbiAgICAgKiBAcmV0dXJuIHtEZWZlcnJlZH0gQSBkZWZlcnJlZCBwcm9taXNlXG4gICAgICovXG4gICAgdmFyIGdldEFjY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZ2V0SXNEZWZlcnJlZCgpICE9PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZ2V0RGVmZXJyZWQoKS5wcm9taXNlO1xuICAgICAgfVxuICAgICAgdG9nZ2xlSXNEZWZlcnJlZCgpO1xuICAgICAgc2V0RGVmZXJyZWQoJHEuZGVmZXIoKSk7XG4gICAgICB2YXIgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB2YXIgdXJsID0gYXBpICsgJz8nICsgdGltZXN0YW1wO1xuICAgICAgJGh0dHAuZ2V0KHVybClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICB0b2dnbGVJc0RlZmVycmVkKCk7XG4gICAgICAgICAgZ2V0RGVmZXJyZWQoKS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgdG9nZ2xlSXNEZWZlcnJlZCgpO1xuICAgICAgICAgIGdldERlZmVycmVkKCkucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm4gZ2V0RGVmZXJyZWQoKS5wcm9taXNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gVXBkYXRlcyBhbiBhY2NvdW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY291bnRcbiAgICAgKiBAcmV0dXJuIHtEZWZlcnJlZH0gQSBkZWZlcnJlZCBwcm9taXNlXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZUFjY291bnQgPSBmdW5jdGlvbiAoYWNjb3VudCkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwKHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGRhdGE6IGFjY291bnQsXG4gICAgICAgIHVybDogYXBpXG4gICAgICB9KVxuICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoc3VjY2Vzcykge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoc3VjY2Vzcyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG5cbiAgICB2YXIgdG9nZ2xlSXNEZWZlcnJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzRGVmZXJyZWQgPSAhaXNEZWZlcnJlZDtcbiAgICB9O1xuXG4gICAgdmFyIGdldElzRGVmZXJyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXNEZWZlcnJlZDtcbiAgICB9O1xuXG4gICAgdmFyIHNldERlZmVycmVkID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgIGRlZmVycmVkID0gZDtcbiAgICB9O1xuXG4gICAgdmFyIGdldERlZmVycmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgIH07XG5cbiAgICAvLyBQdWJsaWMgQVBJXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEFjY291bnQ6IGdldEFjY291bnQsXG4gICAgICBnZXRUb2tlbjogZ2V0VG9rZW4sXG4gICAgICBnZXRUb2tlbk5hbWU6IGdldFRva2VuTmFtZSxcbiAgICAgIHVwZGF0ZUFjY291bnQ6IHVwZGF0ZUFjY291bnRcbiAgICB9O1xuICB9XG5cbn0pKCk7IiwiLyoqXG4gKiBBdXRob3I6IEphbi1XaWxsZW0gV2lzZ2VyaG9mIDxqLndpc2dlcmhvZiBhdCBsaWJyYXJ5LnVxLmVkdS5hdT5cbiAqIERhdGU6IDE1LzAyLzE2XG4gKi9cbihmdW5jdGlvbigpIHtcbiAgYW5ndWxhci5tb2R1bGUoJ3VxbC5hcHAuYWNjb3VudCcpLmNvbmZpZyhDb25maWcpO1xuXG4gIC8qKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gQ29uZmlnICgkaHR0cFByb3ZpZGVyLCAkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgJGNvbXBpbGVQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgvXlxccyooaHR0cHM/fGx8ZGF0YSk6Lyk7XG5cbiAgICB2YXIgJGh0dHAsXG4gICAgICBpbnRlcmNlcHRvciA9IFsnJHEnLCAnJGxvZycsICckdGltZW91dCcsICckaW5qZWN0b3InLFxuICAgICAgICBmdW5jdGlvbiAoJHEsICRsb2csICR0aW1lb3V0LCAkaW5qZWN0b3IpIHtcblxuICAgICAgICAgIHZhciBvblJlcXVlc3QgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgYWNjb3VudFN2YyA9ICRpbmplY3Rvci5nZXQoJ1VRTEFjY291bnRTZXJ2aWNlJyk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgLy8gQWRkIGF1dGhvcml6YXRpb24gdG9rZW4gZm9yIGVhY2ggcmVxdWVzdFxuICAgICAgICAgICAgdmFyIHRva2VuID0gYWNjb3VudFN2Yy5nZXRUb2tlbigpO1xuICAgICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBjb25maWcuaGVhZGVyc1thY2NvdW50U3ZjLmdldFRva2VuTmFtZSgpXSA9IHRva2VuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29uZmlnIHx8ICRxLndoZW4oY29uZmlnKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG9uUmVxdWVzdEVycm9yID0gZnVuY3Rpb24gKHJlamVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgb25SZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgJGh0dHAgPSAkaHR0cCB8fCAkaW5qZWN0b3IuZ2V0KCckaHR0cCcpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8ICRxLndoZW4ocmVzcG9uc2UpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgb25SZXNwb25zZUVycm9yID0gZnVuY3Rpb24gKHJlamVjdGlvbikge1xuICAgICAgICAgICAgJGh0dHAgPSAkaHR0cCB8fCAkaW5qZWN0b3IuZ2V0KCckaHR0cCcpO1xuICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVxdWVzdDogb25SZXF1ZXN0LFxuICAgICAgICAgICAgcmVxdWVzdEVycm9yOiBvblJlcXVlc3RFcnJvcixcbiAgICAgICAgICAgIHJlc3BvbnNlOiBvblJlc3BvbnNlLFxuICAgICAgICAgICAgcmVzcG9uc2VFcnJvcjogb25SZXNwb25zZUVycm9yXG4gICAgICAgICAgfTtcbiAgICAgICAgfV07XG5cbiAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgfVxufSkoKTsiLCIvKipcbiAqIEF1dGhvcjogSmFuLVdpbGxlbSBXaXNnZXJob2YgPGoud2lzZ2VyaG9mIGF0IGxpYnJhcnkudXEuZWR1LmF1PlxuICogRGF0ZTogMTUvMDIvMTZcbiAqL1xuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ3VxbC5hcHAuYWNjb3VudC5tb2NrJywgW10pXG4gICAgLnZhbHVlKCdBY2NvdW50TW9ja1ZhbCcsIHtcbiAgICAgICdnZXRBY2NvdW50Jzoge1xuICAgICAgICAnaGFzU2Vzc2lvbic6IHRydWUsXG4gICAgICAgICduYW1lJzogJ0RldmVsb3BlcicsXG4gICAgICAgICdpZCc6ICd1cWxkZXYnLFxuICAgICAgICAnZ3JvdXBzJzogW1xuICAgICAgICAgICdDTj1saWJfbGliYXBpX1Nwb3RsaWdodEFkbWlucyxPVT1saWItbGliYXBpLWdyb3VwcyxPVT1MSUItZ3JvdXBzLE9VPVVuaXZlcnNpdHkgb2YgUXVlZW5zbGFuZCBMaWJyYXJ5LE9VPURlcHV0eSBWaWNlLUNoYW5jZWxsb3IgKEFjYWRlbWljKSxPVT1WaWNlLUNoYW5jZWxsb3IsREM9dXEsREM9ZWR1LERDPWF1JyxcbiAgICAgICAgICAnQ049bGliX2xpYmFwaV9MaWFpc29uQWRtaW5zLE9VPWxpYi1saWJhcGktZ3JvdXBzLE9VPUxJQi1ncm91cHMsT1U9VW5pdmVyc2l0eSBvZiBRdWVlbnNsYW5kIExpYnJhcnksT1U9RGVwdXR5IFZpY2UtQ2hhbmNlbGxvciAoQWNhZGVtaWMpLE9VPVZpY2UtQ2hhbmNlbGxvcixEQz11cSxEQz1lZHUsREM9YXUnLFxuICAgICAgICAgICdDTj1saWJfc3RhZmYsT1U9TElCLWdyb3VwcyxPVT1Vbml2ZXJzaXR5IG9mIFF1ZWVuc2xhbmQgTGlicmFyeSxPVT1EZXB1dHkgVmljZS1DaGFuY2VsbG9yIChBY2FkZW1pYyksT1U9VmljZS1DaGFuY2VsbG9yLERDPXVxLERDPWVkdSxEQz1hdSdcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuXG4vLyBEZWZpbmUgb3VyIGZha2UgYmFja2VuZFxuICBhbmd1bGFyLm1vZHVsZSgndXFsLmFwcC5hY2NvdW50Lm1vY2snKVxuICAgIC5ydW4oWyckaHR0cEJhY2tlbmQnLCAnVVFMX0FQUF9DT05GSUcnLCAnQWNjb3VudE1vY2tWYWwnLFxuICAgICAgZnVuY3Rpb24gKCRodHRwQmFja2VuZCwgVVFMX0FQUF9DT05GSUcsIEFjY291bnRNb2NrVmFsKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coQWNjb3VudE1vY2tWYWwpO1xuXG4gICAgICAgIHZhciBhcGkgPSBVUUxfQVBQX0NPTkZJRy5hcGlVcmwgKyAnYWNjb3VudCc7XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kLndoZW5HRVQobmV3IFJlZ0V4cChhcGkgKyAnPyhbMC05XSopJykpLnJlc3BvbmQoMjAwLCBBY2NvdW50TW9ja1ZhbC5nZXRBY2NvdW50KTtcbiAgICAgIH1dKTtcblxufSkoKTsiLCIvKipcbiAqIEF1dGhvcjogSmFuLVdpbGxlbSBXaXNnZXJob2YgPGoud2lzZ2VyaG9mIGF0IGxpYnJhcnkudXEuZWR1LmF1PlxuICogRGF0ZTogMTUvMDIvMTZcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gIGFuZ3VsYXIubW9kdWxlKCd1cWwuYXBwLmFjY291bnQnKS5ydW4oUnVuQmxvY2spO1xuXG4gIC8qKiBAbmdJbmplY3QgKiovXG4gIGZ1bmN0aW9uIFJ1bkJsb2NrKCRyb290U2NvcGUsICR3aW5kb3csICRsb2NhdGlvbikge1xuICAgICRyb290U2NvcGUuJG9uKCd1cWwuYWNjb3VudC5sb2dpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdodHRwczovL3d3dy5saWJyYXJ5LnVxLmVkdS5hdS91cWxhaXMvbG9naW4/cmV0dXJuPScgKyAkd2luZG93LmJ0b2EoJGxvY2F0aW9uLmFic1VybCgpKTtcbiAgICB9KTtcbiAgfVxufSkoKTsiLCIvKipcbiAqIEF1dGhvcjogSmFuLVdpbGxlbSBXaXNnZXJob2YgPGoud2lzZ2VyaG9mIGF0IGxpYnJhcnkudXEuZWR1LmF1PlxuICogRGF0ZTogMTUvMDIvMTZcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgndXFsLmFwcC5hY2NvdW50JylcbiAgICAuZmFjdG9yeSgnVVFMQWNjb3VudFNlcnZpY2UnLCB1cWxBY2NvdW50U2VydmljZSk7XG5cbiAgLyoqIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiB1cWxBY2NvdW50U2VydmljZSgkaHR0cCwgJHEsICRjb29raWVzLCBVUUxfQVBQX0NPTkZJRykge1xuICAgIHZhciBhcGkgPSBVUUxfQVBQX0NPTkZJRy5hcGlVcmwgKyAnYWNjb3VudCc7XG4gICAgdmFyIHRva2VuID0gZmFsc2U7XG4gICAgdmFyIGlzRGVmZXJyZWQgPSBmYWxzZTtcbiAgICB2YXIgZGVmZXJyZWQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGN1cnJlbnQgdG9rZW4gdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHRva2VuIHZhbHVlLCBlbHNlIGZhbHNlIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgKi9cbiAgICB2YXIgZ2V0VG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGNvb2tpZXMuZ2V0KFVRTF9BUFBfQ09ORklHLnVxbENvb2tpZU5hbWUpKSkge1xuICAgICAgICB0b2tlbiA9ICRjb29raWVzLmdldChVUUxfQVBQX0NPTkZJRy51cWxDb29raWVOYW1lKTtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgdG9rZW4gbmFtZVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0b2tlbiBuYW1lXG4gICAgICovXG4gICAgdmFyIGdldFRva2VuTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBVUUxfQVBQX0NPTkZJRy51cWxUb2tlbkhlYWRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIEdldHMgYWNjb3VudCBkYXRhXG4gICAgICogQHJldHVybiB7RGVmZXJyZWR9IEEgZGVmZXJyZWQgcHJvbWlzZVxuICAgICAqL1xuICAgIHZhciBnZXRBY2NvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGdldElzRGVmZXJyZWQoKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGdldERlZmVycmVkKCkucHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIHRvZ2dsZUlzRGVmZXJyZWQoKTtcbiAgICAgIHNldERlZmVycmVkKCRxLmRlZmVyKCkpO1xuICAgICAgdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdmFyIHVybCA9IGFwaSArICc/JyArIHRpbWVzdGFtcDtcbiAgICAgICRodHRwLmdldCh1cmwpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdG9nZ2xlSXNEZWZlcnJlZCgpO1xuICAgICAgICAgIGdldERlZmVycmVkKCkucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHRvZ2dsZUlzRGVmZXJyZWQoKTtcbiAgICAgICAgICBnZXREZWZlcnJlZCgpLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdldERlZmVycmVkKCkucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIFVwZGF0ZXMgYW4gYWNjb3VudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2NvdW50XG4gICAgICogQHJldHVybiB7RGVmZXJyZWR9IEEgZGVmZXJyZWQgcHJvbWlzZVxuICAgICAqL1xuICAgIHZhciB1cGRhdGVBY2NvdW50ID0gZnVuY3Rpb24gKGFjY291bnQpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAkaHR0cCh7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBkYXRhOiBhY2NvdW50LFxuICAgICAgICB1cmw6IGFwaVxuICAgICAgfSlcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHN1Y2Nlc3MpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHN1Y2Nlc3MpO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgdmFyIHRvZ2dsZUlzRGVmZXJyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0RlZmVycmVkID0gIWlzRGVmZXJyZWQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRJc0RlZmVycmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGlzRGVmZXJyZWQ7XG4gICAgfTtcblxuICAgIHZhciBzZXREZWZlcnJlZCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICBkZWZlcnJlZCA9IGQ7XG4gICAgfTtcblxuICAgIHZhciBnZXREZWZlcnJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9O1xuXG4gICAgLy8gUHVibGljIEFQSVxuICAgIHJldHVybiB7XG4gICAgICBnZXRBY2NvdW50OiBnZXRBY2NvdW50LFxuICAgICAgZ2V0VG9rZW46IGdldFRva2VuLFxuICAgICAgZ2V0VG9rZW5OYW1lOiBnZXRUb2tlbk5hbWUsXG4gICAgICB1cGRhdGVBY2NvdW50OiB1cGRhdGVBY2NvdW50XG4gICAgfTtcbiAgfVxuXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
